// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/stores.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	core "github.com/rancher/opni-monitoring/pkg/core"
	keyring "github.com/rancher/opni-monitoring/pkg/keyring"
	storage "github.com/rancher/opni-monitoring/pkg/storage"
)

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenStore) CreateToken(ctx context.Context, ttl time.Duration, labels map[string]string) (*core.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, ttl, labels)
	ret0, _ := ret[0].(*core.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenStoreMockRecorder) CreateToken(ctx, ttl, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenStore)(nil).CreateToken), ctx, ttl, labels)
}

// DeleteToken mocks base method.
func (m *MockTokenStore) DeleteToken(ctx context.Context, ref *core.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockTokenStoreMockRecorder) DeleteToken(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockTokenStore)(nil).DeleteToken), ctx, ref)
}

// GetToken mocks base method.
func (m *MockTokenStore) GetToken(ctx context.Context, ref *core.Reference) (*core.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, ref)
	ret0, _ := ret[0].(*core.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenStoreMockRecorder) GetToken(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenStore)(nil).GetToken), ctx, ref)
}

// IncrementUsageCount mocks base method.
func (m *MockTokenStore) IncrementUsageCount(ctx context.Context, ref *core.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementUsageCount", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementUsageCount indicates an expected call of IncrementUsageCount.
func (mr *MockTokenStoreMockRecorder) IncrementUsageCount(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementUsageCount", reflect.TypeOf((*MockTokenStore)(nil).IncrementUsageCount), ctx, ref)
}

// ListTokens mocks base method.
func (m *MockTokenStore) ListTokens(ctx context.Context) ([]*core.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens", ctx)
	ret0, _ := ret[0].([]*core.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens.
func (mr *MockTokenStoreMockRecorder) ListTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockTokenStore)(nil).ListTokens), ctx)
}

// MockClusterStore is a mock of ClusterStore interface.
type MockClusterStore struct {
	ctrl     *gomock.Controller
	recorder *MockClusterStoreMockRecorder
}

// MockClusterStoreMockRecorder is the mock recorder for MockClusterStore.
type MockClusterStoreMockRecorder struct {
	mock *MockClusterStore
}

// NewMockClusterStore creates a new mock instance.
func NewMockClusterStore(ctrl *gomock.Controller) *MockClusterStore {
	mock := &MockClusterStore{ctrl: ctrl}
	mock.recorder = &MockClusterStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterStore) EXPECT() *MockClusterStoreMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClusterStore) CreateCluster(ctx context.Context, cluster *core.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterStoreMockRecorder) CreateCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterStore)(nil).CreateCluster), ctx, cluster)
}

// DeleteCluster mocks base method.
func (m *MockClusterStore) DeleteCluster(ctx context.Context, ref *core.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterStoreMockRecorder) DeleteCluster(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterStore)(nil).DeleteCluster), ctx, ref)
}

// GetCluster mocks base method.
func (m *MockClusterStore) GetCluster(ctx context.Context, ref *core.Reference) (*core.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, ref)
	ret0, _ := ret[0].(*core.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterStoreMockRecorder) GetCluster(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterStore)(nil).GetCluster), ctx, ref)
}

// KeyringStore mocks base method.
func (m *MockClusterStore) KeyringStore(ctx context.Context, ref *core.Reference) (storage.KeyringStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyringStore", ctx, ref)
	ret0, _ := ret[0].(storage.KeyringStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyringStore indicates an expected call of KeyringStore.
func (mr *MockClusterStoreMockRecorder) KeyringStore(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyringStore", reflect.TypeOf((*MockClusterStore)(nil).KeyringStore), ctx, ref)
}

// ListClusters mocks base method.
func (m *MockClusterStore) ListClusters(ctx context.Context, matchLabels *core.LabelSelector, matchOptions core.MatchOptions) (*core.ClusterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, matchLabels, matchOptions)
	ret0, _ := ret[0].(*core.ClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockClusterStoreMockRecorder) ListClusters(ctx, matchLabels, matchOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClusterStore)(nil).ListClusters), ctx, matchLabels, matchOptions)
}

// UpdateCluster mocks base method.
func (m *MockClusterStore) UpdateCluster(ctx context.Context, cluster *core.Cluster) (*core.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, cluster)
	ret0, _ := ret[0].(*core.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockClusterStoreMockRecorder) UpdateCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockClusterStore)(nil).UpdateCluster), ctx, cluster)
}

// MockLoggingClusterStore is a mock of LoggingClusterStore interface.
type MockLoggingClusterStore struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingClusterStoreMockRecorder
}

// MockLoggingClusterStoreMockRecorder is the mock recorder for MockLoggingClusterStore.
type MockLoggingClusterStoreMockRecorder struct {
	mock *MockLoggingClusterStore
}

// NewMockLoggingClusterStore creates a new mock instance.
func NewMockLoggingClusterStore(ctrl *gomock.Controller) *MockLoggingClusterStore {
	mock := &MockLoggingClusterStore{ctrl: ctrl}
	mock.recorder = &MockLoggingClusterStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggingClusterStore) EXPECT() *MockLoggingClusterStoreMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockLoggingClusterStore) CreateCluster(ctx context.Context, cluster *core.LoggingCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockLoggingClusterStoreMockRecorder) CreateCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockLoggingClusterStore)(nil).CreateCluster), ctx, cluster)
}

// DeleteCluster mocks base method.
func (m *MockLoggingClusterStore) DeleteCluster(ctx context.Context, ref *core.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockLoggingClusterStoreMockRecorder) DeleteCluster(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockLoggingClusterStore)(nil).DeleteCluster), ctx, ref)
}

// GetCluster mocks base method.
func (m *MockLoggingClusterStore) GetCluster(ctx context.Context, ref *core.Reference) (*core.LoggingCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, ref)
	ret0, _ := ret[0].(*core.LoggingCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockLoggingClusterStoreMockRecorder) GetCluster(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockLoggingClusterStore)(nil).GetCluster), ctx, ref)
}

// ListClusters mocks base method.
func (m *MockLoggingClusterStore) ListClusters(ctx context.Context, matchLabels *core.LabelSelector, matchOptions core.MatchOptions) (*core.LoggingClusterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, matchLabels, matchOptions)
	ret0, _ := ret[0].(*core.LoggingClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockLoggingClusterStoreMockRecorder) ListClusters(ctx, matchLabels, matchOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockLoggingClusterStore)(nil).ListClusters), ctx, matchLabels, matchOptions)
}

// OpensearchUserStore mocks base method.
func (m *MockLoggingClusterStore) OpensearchUserStore(ctx context.Context) (storage.OpensearchUserStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpensearchUserStore", ctx)
	ret0, _ := ret[0].(storage.OpensearchUserStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpensearchUserStore indicates an expected call of OpensearchUserStore.
func (mr *MockLoggingClusterStoreMockRecorder) OpensearchUserStore(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpensearchUserStore", reflect.TypeOf((*MockLoggingClusterStore)(nil).OpensearchUserStore), ctx)
}

// UpdateCluster mocks base method.
func (m *MockLoggingClusterStore) UpdateCluster(ctx context.Context, cluster *core.LoggingCluster) (*core.LoggingCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, cluster)
	ret0, _ := ret[0].(*core.LoggingCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockLoggingClusterStoreMockRecorder) UpdateCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockLoggingClusterStore)(nil).UpdateCluster), ctx, cluster)
}

// MockRBACStore is a mock of RBACStore interface.
type MockRBACStore struct {
	ctrl     *gomock.Controller
	recorder *MockRBACStoreMockRecorder
}

// MockRBACStoreMockRecorder is the mock recorder for MockRBACStore.
type MockRBACStoreMockRecorder struct {
	mock *MockRBACStore
}

// NewMockRBACStore creates a new mock instance.
func NewMockRBACStore(ctrl *gomock.Controller) *MockRBACStore {
	mock := &MockRBACStore{ctrl: ctrl}
	mock.recorder = &MockRBACStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBACStore) EXPECT() *MockRBACStoreMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRBACStore) CreateRole(arg0 context.Context, arg1 *core.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRBACStoreMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRBACStore)(nil).CreateRole), arg0, arg1)
}

// CreateRoleBinding mocks base method.
func (m *MockRBACStore) CreateRoleBinding(arg0 context.Context, arg1 *core.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding.
func (mr *MockRBACStoreMockRecorder) CreateRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockRBACStore)(nil).CreateRoleBinding), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockRBACStore) DeleteRole(arg0 context.Context, arg1 *core.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRBACStoreMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRBACStore)(nil).DeleteRole), arg0, arg1)
}

// DeleteRoleBinding mocks base method.
func (m *MockRBACStore) DeleteRoleBinding(arg0 context.Context, arg1 *core.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockRBACStoreMockRecorder) DeleteRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockRBACStore)(nil).DeleteRoleBinding), arg0, arg1)
}

// GetRole mocks base method.
func (m *MockRBACStore) GetRole(arg0 context.Context, arg1 *core.Reference) (*core.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(*core.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRBACStoreMockRecorder) GetRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRBACStore)(nil).GetRole), arg0, arg1)
}

// GetRoleBinding mocks base method.
func (m *MockRBACStore) GetRoleBinding(arg0 context.Context, arg1 *core.Reference) (*core.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(*core.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBinding indicates an expected call of GetRoleBinding.
func (mr *MockRBACStoreMockRecorder) GetRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBinding", reflect.TypeOf((*MockRBACStore)(nil).GetRoleBinding), arg0, arg1)
}

// ListRoleBindings mocks base method.
func (m *MockRBACStore) ListRoleBindings(arg0 context.Context) (*core.RoleBindingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleBindings", arg0)
	ret0, _ := ret[0].(*core.RoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBindings indicates an expected call of ListRoleBindings.
func (mr *MockRBACStoreMockRecorder) ListRoleBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBindings", reflect.TypeOf((*MockRBACStore)(nil).ListRoleBindings), arg0)
}

// ListRoles mocks base method.
func (m *MockRBACStore) ListRoles(arg0 context.Context) (*core.RoleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0)
	ret0, _ := ret[0].(*core.RoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockRBACStoreMockRecorder) ListRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockRBACStore)(nil).ListRoles), arg0)
}

// MockKeyringStore is a mock of KeyringStore interface.
type MockKeyringStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyringStoreMockRecorder
}

// MockKeyringStoreMockRecorder is the mock recorder for MockKeyringStore.
type MockKeyringStoreMockRecorder struct {
	mock *MockKeyringStore
}

// NewMockKeyringStore creates a new mock instance.
func NewMockKeyringStore(ctrl *gomock.Controller) *MockKeyringStore {
	mock := &MockKeyringStore{ctrl: ctrl}
	mock.recorder = &MockKeyringStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyringStore) EXPECT() *MockKeyringStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeyringStore) Get(ctx context.Context) (keyring.Keyring, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(keyring.Keyring)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyringStoreMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyringStore)(nil).Get), ctx)
}

// Put mocks base method.
func (m *MockKeyringStore) Put(ctx context.Context, keyring keyring.Keyring) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, keyring)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyringStoreMockRecorder) Put(ctx, keyring interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyringStore)(nil).Put), ctx, keyring)
}

// MockKeyValueStore is a mock of KeyValueStore interface.
type MockKeyValueStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreMockRecorder
}

// MockKeyValueStoreMockRecorder is the mock recorder for MockKeyValueStore.
type MockKeyValueStoreMockRecorder struct {
	mock *MockKeyValueStore
}

// NewMockKeyValueStore creates a new mock instance.
func NewMockKeyValueStore(ctrl *gomock.Controller) *MockKeyValueStore {
	mock := &MockKeyValueStore{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStore) EXPECT() *MockKeyValueStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeyValueStore) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueStoreMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueStore)(nil).Get), ctx, key)
}

// ListKeys mocks base method.
func (m *MockKeyValueStore) ListKeys(ctx context.Context, prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", ctx, prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockKeyValueStoreMockRecorder) ListKeys(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockKeyValueStore)(nil).ListKeys), ctx, prefix)
}

// Put mocks base method.
func (m *MockKeyValueStore) Put(ctx context.Context, key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyValueStoreMockRecorder) Put(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyValueStore)(nil).Put), ctx, key, value)
}

// MockKeyValueStoreBroker is a mock of KeyValueStoreBroker interface.
type MockKeyValueStoreBroker struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreBrokerMockRecorder
}

// MockKeyValueStoreBrokerMockRecorder is the mock recorder for MockKeyValueStoreBroker.
type MockKeyValueStoreBrokerMockRecorder struct {
	mock *MockKeyValueStoreBroker
}

// NewMockKeyValueStoreBroker creates a new mock instance.
func NewMockKeyValueStoreBroker(ctrl *gomock.Controller) *MockKeyValueStoreBroker {
	mock := &MockKeyValueStoreBroker{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStoreBroker) EXPECT() *MockKeyValueStoreBrokerMockRecorder {
	return m.recorder
}

// NewKeyValueStore mocks base method.
func (m *MockKeyValueStoreBroker) NewKeyValueStore(namespace string) (storage.KeyValueStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewKeyValueStore", namespace)
	ret0, _ := ret[0].(storage.KeyValueStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewKeyValueStore indicates an expected call of NewKeyValueStore.
func (mr *MockKeyValueStoreBrokerMockRecorder) NewKeyValueStore(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewKeyValueStore", reflect.TypeOf((*MockKeyValueStoreBroker)(nil).NewKeyValueStore), namespace)
}

// MockOpensearchUserStore is a mock of OpensearchUserStore interface.
type MockOpensearchUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockOpensearchUserStoreMockRecorder
}

// MockOpensearchUserStoreMockRecorder is the mock recorder for MockOpensearchUserStore.
type MockOpensearchUserStoreMockRecorder struct {
	mock *MockOpensearchUserStore
}

// NewMockOpensearchUserStore creates a new mock instance.
func NewMockOpensearchUserStore(ctrl *gomock.Controller) *MockOpensearchUserStore {
	mock := &MockOpensearchUserStore{ctrl: ctrl}
	mock.recorder = &MockOpensearchUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpensearchUserStore) EXPECT() *MockOpensearchUserStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOpensearchUserStore) Get(ctx context.Context) (*core.OpensearchUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(*core.OpensearchUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOpensearchUserStoreMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOpensearchUserStore)(nil).Get), ctx)
}

// Put mocks base method.
func (m *MockOpensearchUserStore) Put(ctx context.Context, user *core.OpensearchUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockOpensearchUserStoreMockRecorder) Put(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockOpensearchUserStore)(nil).Put), ctx, user)
}
